Chapter 1: Geospatial Development Using Python
	Python
	Geospatial development
	Applications of geospatial development
		Analyzing geospatial data
		Visualizing geospatial data
		Creating a geospatial mash-up
	Recent developments
	Summary
Chapter 2: GIS
	Core GIS concepts
		Location
		Distance
		Units
		Projections
			Cylindrical projections
			Conic projections
			Azimuthal projections
			The nature of map projections
		Coordinate systems
		Datums
		Shapes
	GIS data formats
	Working with GIS data manually
	Summary
Chapter 3: Python Libraries for Geospatial Development
	Reading and writing geospatial data
		GDAL/OGR
			GDAL design
			GDAL example code
			OGR design
			OGR example code
		Documentation
		Availability
	Dealing with projections
		pyproj
		Design
			Proj
			Geod
		Example code
		Documentation
		Availability
	Analyzing and manipulating geospatial Data
		Shapely
		Design
		Example code
		Documentation
		Availability
	Visualizing geospatial data
		Mapnik
		Design
		Example code
		Documentation
		Availability
	Summary
Chapter 4: Sources of Geospatial Data
	Sources of geospatial data in vector format
		OpenStreetMap
			Data Format
			Obtaining and using OpenStreetMap data
		TIGER
			Data format
			Obtaining and Using TIGER Data
		Natural Earth
			Data format
			Obtaining and using Natural Earth vector data
		Global self-consistent
high-resolution shoreline database (GSHHS
			Data format
			Obtaining the GSHHS database
		World Borders Dataset
			Data format
			Obtaining the World Borders Dataset
	Sources of geospatial data in raster format
		Landsat
			Data format
			Obtaining Landsat imagery
		Natural Earth
			Data format
			Obtaining and using Natural Earth raster data
		Global Land One-kilometer Base Elevation (GLOBE
			Data format
			Obtaining and using GLOBE data
		National Elevation Dataset (NED
			Data format
			Obtaining and using NED data
	Sources of other types of geospatial data
		GEOnet Names Server
			Data format
			Obtaining and using GEOnet Names Server data
		Geographic Names Information System (GNIS
			Data format
			Obtaining and using GNIS Data
	Choosing your geospatial data source
	Summary
Chapter 5: Working with
Data in Python
	Pre-requisites
	Reading and writing geospatial data
		Task – calculate the bounding box for each country in the world
		Task – save the country bounding boxes into a shapefile
		Task – analyze height data using a digital elevation map
	Changing datums and projections
		Task – change projections to combine shapefiles using geographic and UTM coordinates
		Task – change the datums to allow older and newer TIGER data to be combined
	Representing and storing geospatial data
		Task – calculate the border between Thailand and Myanmar
		Task – save geometries into a text file
	Performing geospatial calculations
		Task – identify parks in or near urban areas
	Converting and standardizing units of geometry and distance
		Task – calculate the length of the Thai-Myanmar border
		Task – find a point 132.7 kilometers west of Soshone, California
	Exercises
	Summary
Chapter 6: GIS in the Database
	Spatially-enabled databases
	Spatial indexes
	Open source spatially-enabled databases
		MySQL
		PostGIS
			Installing and configuring PostGIS
			Using PostGIS
			Documentation
			Advanced PostGIS Features
		SpatiaLite
			Installing SpatiaLite
			Installing pysqlite
			Accessing SpatiaLite from Python
			Documentation
			Using SpatiaLite
			SpatiaLite capabilities
	Commercial Spatially-Enabled Databases
		Oracle
		MS SQL Server
	Recommended best practices
		Using the database to keep track of spatial references
		Using the appropriate spatial reference for your data
			Option 1 – Using a database that supports geographies
			Option 2 – transform features as required
			Option 3 – transform features from the outset
			When to use unprojected coordinates
		Avoiding on-the-fly transformations within a query
		Don't create geometries within a query
			Using spatial indexes appropriately
		Knowing the limits of your database's query optimizer
			MySQL
			PostGIS
			SpatiaLite
	Working with geospatial databases using python
		Prerequisites
		Working with MySQL
		Working with PostGIS
		Working with SpatiaLite
		Comparing the databases
	Summary
Chapter 7: Working with Spatial Data
	About DISTAL
	Designing and building the database
	Downloading the data
		World Borders Dataset
		GSHHS
		GNIS
		GEOnet Names Server
	Importing the data
		World Borders Dataset
		GSHHS
		US places' name data
		Worldwide places' name data
	Implementing the DISTAL application
		The shared "database" module
		The "select country" script
		The "select area" script
			Calculating the bounding box
			Calculating the map's dimensions
			Setting up the data source
			Rendering the map image
		The "show results" script
			Identifying the clicked-on point
			Identifying features by distance
			Displaying the results
	Application review and improvements
		Usability
		Quality
			Place name issues
			Lat/Long coordinate problems
		Performance
			Finding the problem
			Improving performance
			Calculating the tiled shorelines
			Using the tiled shorelines
			Analyzing the performance improvement
	Summary
Chapter 8: Using Python and
to Generate Maps
	Introducing Mapnik
	Creating an example map
	Mapnik in Depth
		Data sources
			Shapefile
			PostGIS
			Gdal
			Ogr
			SQLite
			OSM
			MemoryDatasource
		Rules, filters, and styles
			Filters
			Scale denominators
			"Else" rules
			"Also" rules
		Symbolizers
			Drawing lines
			Drawing polygons
			Drawing labels
			Drawing points
			Drawing raster images
			Using colors
		Maps and layers
			Map attributes and methods
			Layer attributes and methods
		Map rendering
	MapGenerator revisited
		The MapGenerator's interface
		Creating the main map layer
		Displaying points on the map
		Rendering the map
		What the map generator teaches us
	Map definition files
	Summary
Chapter 9: Putting It All Together – a Complete Mapping System
	About the ShapeEditor
	Designing the ShapeEditor
		Importing a shapefile
		Selecting a feature
		Editing a feature
		Exporting a shapefile
	Prerequisites
	The structure of a Django application
		Models
		Views
		URL dispatching
		Templates
	Setting up the database
	Setting up the ShapeEditor project
	Defining the ShapeEditor's applications
	Creating the shared application
	Defining the data models
		Shapefile
		Attribute
		Feature
		AttributeValue
		The models.py file
	Playing with the admin system
	Summary
Chapter 10: ShapeEditor – Implementing List View, Import, and Export
	Implementing the "list shapefiles" view
	Importing shapefiles
		The "import shapefile" view function
		Extracting the uploaded shapefile
		Importing the shapefile's contents
			Open the shapefile
			Add the Shapefile object to the database
			Define the shapefile's attributes
			Store the shapefile's features
			Store the shapefile's attributes
		Cleaning up
	Exporting Shapefiles
		Define the OGR Shapefile
		Saving the features into the shapefile
		Saving the attributes into the shapefile
		Compressing the shapefile
		Deleting temporary files
		Returning the ZIP archive to the user
	Summary
Chapter 11: ShapeEditor – Selecting and Editing Features
	Selecting a feature to edit
		Implementing the Tile Map Server
			Setting up the Base Map
			Tile rendering
		Using OpenLayers to display the map
		Intercepting mouse clicks
		Implementing the find feature view
	Editing features
	Adding features
	Deleting features
	Deleting shapefiles
	Using ShapeEditor
	Further improvements and enhancements
	Summary

