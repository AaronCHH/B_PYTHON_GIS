# Chapter 1: Geospatial Development Using Python
## 1.1 Python
## 1.2 Geospatial development
## 1.3 Applications of geospatial development
### 1.3.1 Analyzing geospatial data
### 1.3.2 Visualizing geospatial data
### 1.3.3 Creating a geospatial mash-up
## 1.4 Recent developments
## 1.5 Summary 

# Chapter 2: GIS
## 2.1 Core GIS concepts
### 2.1.1 Location
### 2.1.2 Distance
### 2.1.3 Units
### 2.1.4 Projections
* Cylindrical projections
* Conic projections
* Azimuthal projections
* The nature of map projections
### 2.1.5 Coordinate systems
### 2.1.6 Datums
### 2.1.7 Shapes
## 2.2 GIS data formats
## 2.3 Working with GIS data manually
## 2.4 Summary 

# Chapter 3: Python Libraries for Geospatial Development
## 3.1 Reading and writing geospatial data
### 3.1.1 GDAL/OGR
* GDAL design
* GDAL example code
* OGR design
* OGR example code
### 3.1.2 Documentation
### 3.1.3 Availability
## 3.2 Dealing with projections
### 3.2.1 pyproj
### 3.2.2 Design
* Proj
* Geod
### 3.2.3 Example code
### 3.2.4 Documentation
### 3.2.5 Availability
## 3.3 Analyzing and manipulating geospatial Data
### 3.3.1 Shapely
### 3.3.2 Design
### 3.3.3 Example code
### 3.3.4 Documentation
### 3.3.5 Availability
## 3.4 Visualizing geospatial data
### 3.4.1 Mapnik
### 3.4.2 Design
### 3.4.3 Example code
### 3.4.4 Documentation
### 3.4.5 Availability
## 3.5 Summary 

# Chapter 4: Sources of Geospatial Data  
## 4.1 Sources of geospatial data in vector format  
### 4.1.1 OpenStreetMap  
* Data Format  
* Obtaining and using OpenStreetMap data  
### 4.1.2 TIGER  
* Data format  
* Obtaining and Using TIGER Data  
### 4.1.3 Natural Earth  
* Data format  
* Obtaining and using Natural Earth vector data  
### 4.1.4 Global self-consistent high-resolution shoreline database (GSHHS)  
* Data format  
* Obtaining the GSHHS database  
### 4.1.5 World Borders Dataset  
* Data format  
* Obtaining the World Borders Dataset  
## 4.2 Sources of geospatial data in raster format  
### 4.2.1 Landsat  
* Data format  
* Obtaining Landsat imagery  
### 4.2.2 Natural Earth  
* Data format  
* Obtaining and using Natural Earth raster data  
### 4.2.3 Global Land One-kilometer Base Elevation (GLOBE  
* Data format  
* Obtaining and using GLOBE data  
### 4.2.4 National Elevation Dataset (NED  
* Data format  
* Obtaining and using NED data  
## 4.3 Sources of other types of geospatial data  
### 4.3.1 GEOnet Names Server  
* Data format  
* Obtaining and using GEOnet Names Server data  
### 4.3.2 Geographic Names Information System (GNIS  
* Data format  
* Obtaining and using GNIS Data  
## 4.4 Choosing your geospatial data source  
## 4.5 Summary   

# Chapter 5: Working with Data in Python
## 5.1 Pre-requisites
## 5.2 Reading and writing geospatial data
### 5.2.1 Task – calculate the bounding box for each country in the world
### 5.2.2 Task – save the country bounding boxes into a shapefile
### 5.2.3 Task – analyze height data using a digital elevation map
## 5.3 Changing datums and projections
### 5.3.1 Task – change projections to combine shapefiles using geographic and UTM coordinates
### 5.3.2 Task – change the datums to allow older and newer TIGER data to be combined
## 5.4 Representing and storing geospatial data
### 5.4.1 Task – calculate the border between Thailand and Myanmar
### 5.4.2 Task – save geometries into a text file
## 5.5 Performing geospatial calculations
### 5.5.1 Task – identify parks in or near urban areas
## 5.6 Converting and standardizing units of geometry and distance
### 5.6.1 Task – calculate the length of the Thai-Myanmar border
### 5.6.2 Task – find a point 132.7 kilometers west of Soshone, California
## 5.7 Exercises
## 5.8 Summary 

# Chapter 6: GIS in the Database
## 6.1 Spatially-enabled databases
## 6.2 Spatial indexes
## 6.3 Open source spatially-enabled databases
### 6.3.1 MySQL
### 6.3.2 PostGIS
* Installing and configuring PostGIS
* Using PostGIS
* Documentation
* Advanced PostGIS Features
### 6.3.3 SpatiaLite
* Installing SpatiaLite
* Installing pysqlite
* Accessing SpatiaLite from Python
* Documentation
* Using SpatiaLite
* SpatiaLite capabilities
## 6.4 Commercial Spatially-Enabled Databases
### 6.4.1 Oracle
### 6.4.2 MS SQL Server
## 6.5 Recommended best practices
### 6.5.1 Using the database to keep track of spatial references
### 6.5.2 Using the appropriate spatial reference for your data
* Option 1 – Using a database that supports geographies
* Option 2 – transform features as required
* Option 3 – transform features from the outset
* When to use unprojected coordinates
### 6.5.3 Avoiding on-the-fly transformations within a query
### 6.5.4 Don't create geometries within a query
* Using spatial indexes appropriately
### 6.5.5 Knowing the limits of your database's query optimizer
* MySQL
* PostGIS
* SpatiaLite
## 6.6 Working with geospatial databases using python
### 6.6.1 Prerequisites
### 6.6.2 Working with MySQL
### 6.6.3 Working with PostGIS
### 6.6.4 Working with SpatiaLite
### 6.6.5 Comparing the databases
## 6.7 Summary 

# Chapter 7: Working with Spatial Data
## 7.1 About DISTAL
## 7.2 Designing and building the database
## 7.3 Downloading the data
### 7.3.1 World Borders Dataset
### 7.3.2 GSHHS
### 7.3.3 GNIS
### 7.3.4 GEOnet Names Server
## 7.4 Importing the data
### 7.4.1 World Borders Dataset
### 7.4.2 GSHHS
### 7.4.3 US places' name data
### 7.4.4 Worldwide places' name data
## 7.5 Implementing the DISTAL application
### 7.5.1 The shared "database" module
### 7.5.2 The "select country" script
### 7.5.3 The "select area" script
* Calculating the bounding box
* Calculating the map's dimensions
* Setting up the data source
* Rendering the map image
### 7.5.4 The "show results" script
* Identifying the clicked-on point
* Identifying features by distance
* Displaying the results
## 7.6 Application review and improvements
### 7.6.1 Usability
### 7.6.2 Quality
* Place name issues
* Lat/Long coordinate problems
### 7.6.3 Performance
* Finding the problem
* Improving performance
* Calculating the tiled shorelines
* Using the tiled shorelines
* Analyzing the performance improvement
## 7.7 Summary 

# Chapter 8: Using Python and to Generate Maps
## 8.1 Introducing Mapnik
## 8.2 Creating an example map
## 8.3 Mapnik in Depth
### 8.3.1 Data sources
* Shapefile
* PostGIS
* Gdal
* Ogr
* SQLite
* OSM
* MemoryDatasource
### 8.3.2 Rules, filters, and styles
* Filters
* Scale denominators
* "Else" rules
* "Also" rules
### 8.3.3 Symbolizers
* Drawing lines
* Drawing polygons
* Drawing labels
* Drawing points
* Drawing raster images
* Using colors
### 8.3.4 Maps and layers
* Map attributes and methods
* Layer attributes and methods
### 8.3.5 Map rendering
## 8.4 MapGenerator revisited
### 8.4.1 The MapGenerator's interface
### 8.4.2 Creating the main map layer
### 8.4.3 Displaying points on the map
### 8.4.4 Rendering the map
### 8.4.5 What the map generator teaches us
## 8.5 Map definition files
## 8.6 Summary 

# Chapter 9: Putting It All Together – a Complete Mapping System
## 9.1 About the ShapeEditor
## 9.2 Designing the ShapeEditor
### 9.2.1 Importing a shapefile
### 9.2.2 Selecting a feature
### 9.2.3 Editing a feature
### 9.2.4 Exporting a shapefile
## 9.3 Prerequisites
## 9.4 The structure of a Django application
### 9.4.1 Models
### 9.4.2 Views
### 9.4.3 URL dispatching
### 9.4.4 Templates
## 9.5 Setting up the database
## 9.6 Setting up the ShapeEditor project
## 9.7 Defining the ShapeEditor's applications
## 9.8 Creating the shared application
## 9.9 Defining the data models
### 9.9.1 Shapefile
### 9.9.2 Attribute
### 9.9.3 Feature
### 9.9.4 AttributeValue
### 9.9.5 The models.py file
## 9.10 Playing with the admin system
## 9.11 Summary 

# Chapter 10: ShapeEditor – Implementing List View, Import, and Export
## 10.1 Implementing the "list shapefiles" view
## 10.2 Importing shapefiles
### 10.2.1 The "import shapefile" view function
### 10.2.2 Extracting the uploaded shapefile
### 10.2.3 Importing the shapefile's contents
* Open the shapefile
* Add the Shapefile object to the database
* Define the shapefile's attributes
* Store the shapefile's features
* Store the shapefile's attributes
### 10.2.4 Cleaning up
## 10.3 Exporting Shapefiles
### 10.3.1 Define the OGR Shapefile
### 10.3.2 Saving the features into the shapefile
### 10.3.3 Saving the attributes into the shapefile
### 10.3.4 Compressing the shapefile
### 10.3.5 Deleting temporary files
### 10.3.6 Returning the ZIP archive to the user
## 10.4 Summary 

# Chapter 11: ShapeEditor – Selecting and Editing Features
## 11.1 Selecting a feature to edit
### 11.1.1 Implementing the Tile Map Server
* Setting up the Base Map
* Tile rendering
### 11.1.2 Using OpenLayers to display the map
### 11.1.3 Intercepting mouse clicks
### 11.1.4 Implementing the find feature view
## 11.2 Editing features
## 11.3 Adding features
## 11.4 Deleting features
## 11.5 Deleting shapefiles
## 11.6 Using ShapeEditor
## 11.7 Further improvements and enhancements
## 11.8 Summary 
